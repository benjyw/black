[GLOBAL]
pants_version = "2.11.0"
backend_packages = [
    "pants.backend.python",
    "pants.backend.python.lint.black",
    "pants.backend.python.typecheck.mypy",
    "pants.backend.experimental.python",
]

pants_ignore.add = [
    # Various files in the tests/data folders are gitignored, to test file discovery.
    # Pants ignores gitignored files by default, but don't want Pants to ignore these.
    "!tests/data/**",
]

[source]
root_patterns = [
    '/',
    '/src',
]

[subprocess-environment]
env_vars.add = ["_RUNNING_IN_PANTS=1", "BLACK_USE_MYPYC"]

[anonymous-telemetry]
enabled = true
repo_id = "C6339CF0-26A0-43B3-8DF0-2E8E2A3DE28C"

[python]
# The default constraints are CPython, and we have tests that include PyPy as a parameterized
# interpreter_constraints. If such a test depends on a target with no explicit constraint then
# Pants will fall back to the default, and then fail because CPython and PyPy constraints can't
# be merged. Therefore we blank out the default constraints, and let the target parameters in
# any given run set the constraints.
interpreter_constraints = []
enable_resolves = true
resolves = { python-default = "lockfiles/python-default.lock" }
default_resolve = "python-default"
lockfile_generator = "pex"

[pytest]
lockfile = "lockfiles/pytest.lock"

[mypy]
lockfile = "lockfiles/mypy.lock"
interpreter_constraints = [">=3.6.2"]
extra_type_stubs = [
    "types-typed-ast >= 1.4.2",
    "types-dataclasses >= 0.1.3",
    "typing-extensions > 3.10.0.1",
]

[python-infer]
unowned_dependency_behavior = "warning"
